package com.postsmanager.serviceImpl;

import java.io.IOException;
import java.util.Base64;
import java.util.List;
import java.util.Optional;

import org.bson.BsonBinarySubType;
import org.bson.types.Binary;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.postsmanager.dto.AllPostResponse;
import com.postsmanager.dto.PostDataRequest;
import com.postsmanager.dto.PostDataResponse;
import com.postsmanager.dto.PostLikeRequest;
import com.postsmanager.dto.Request;
import com.postsmanager.dto.Response;
import com.postsmanager.model.Likes;
import com.postsmanager.model.Post;
import com.postsmanager.repository.LikesRepository;
import com.postsmanager.repository.PostsRepository;
import com.postsmanager.service.PostService;

@Service
public class PostServiceImpl implements PostService{

	@Autowired
	PostsRepository postsRepository;
	
	@Autowired
	LikesRepository likesRepository;
	
	private static int id=0;
	
	@Override
	public Response addPost(PostDataRequest postDataRequest) throws IOException {
		// TODO Auto-generated method stub
		String imageStr = Base64.getEncoder().encodeToString(postDataRequest.getImage().getBytes());
	    Post p=	postsRepository.save(new Post(++id,postDataRequest.getUserName(),postDataRequest.getTitle(),postDataRequest.getLocation(),imageStr,postDataRequest.getHashtsges(),postDataRequest.getCaption(),new Likes(id,0,postDataRequest.getUserName(),null)));
	    if(p.equals(null))
	    {
	    	Response response=new Response(HttpStatus.INTERNAL_SERVER_ERROR.value(),"Faild to post....");
	    	return response;
	    }
	    Response response=new Response(HttpStatus.OK.value(),"Post added Successfully....");
    	return response;
	}

	@Override
	public Response deletePost(Request request) {
		// TODO Auto-generated method stub
		Optional<Post> p=postsRepository.findByUserNameAndId(request.getUserName(), request.getId());
		if(p.isEmpty())
	    {
	    	Response response=new Response(HttpStatus.INTERNAL_SERVER_ERROR.value(),"Faild to delete post....");
	    	return response;
	    }
		postsRepository.deleteById(request.getId());
	    Response response=new Response(HttpStatus.OK.value(),"Post deleted Successfully....");
    	return response;
	}

	@Override
	public AllPostResponse getAllPost(String userName) {
		// TODO Auto-generated method stub
		List<Post> p=postsRepository.findByUserName(userName);
		if(p.isEmpty())
	    {
			AllPostResponse response=new AllPostResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(),"Faild to fetch posts....",null);
	    	return response;
	    }
		AllPostResponse response=new AllPostResponse(HttpStatus.OK.value(),"All Posts fetched Successfully....",p);
    	return response;
	}

	@Override
	public PostDataResponse getPost(Request request) {
		// TODO Auto-generated method stub
		Optional<Post> p=postsRepository.findByUserNameAndId(request.getUserName(), request.getId());
		if(p.isEmpty())
	    {
			PostDataResponse response=new PostDataResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(),"Faild to fetch post....",null);
	    	return response;
	    }
		PostDataResponse response=new PostDataResponse(HttpStatus.OK.value(),"Post fetched Successfully....",p.get());
    	return response;
	}

	@Override
	public Response likePost(PostLikeRequest request) {
		// TODO Auto-generated method stub
		Optional<Post> p=postsRepository.findByUserNameAndId(request.getUserName(), request.getId());
		if(p.isEmpty())
	    {
	    	Response response=new Response(HttpStatus.INTERNAL_SERVER_ERROR.value(),"Faild to like post....");
	    	return response;
	    }
		Optional<Likes> l=likesRepository.findById(request.getId());
		Likes likes= new Likes(request.getId(),p.get().getLikes().getLikes()+1,request.getUserName(), request.getLikedBy());
		p.get().setLikes(likes);
		postsRepository.save(p.get());
		likesRepository.save(likes);
	    Response response=new Response(HttpStatus.OK.value(),"Post Liked Successfully....");
    	return response;
	}

	@Override
	public Response dislikePost(PostLikeRequest request) {
		// TODO Auto-generated method stub
		Optional<Post> p=postsRepository.findByUserNameAndId(request.getUserName(), request.getId());
		if(p.isEmpty())
	    {
	    	Response response=new Response(HttpStatus.INTERNAL_SERVER_ERROR.value(),"Faild to dislike post....");
	    	return response;
	    }
		Likes likes= new Likes(request.getId(),p.get().getLikes().getLikes()-1,request.getUserName(),request.getLikedBy());
		p.get().setLikes(likes);
		postsRepository.save(p.get());
		likesRepository.save(likes);
	    Response response=new Response(HttpStatus.OK.value(),"Post Liked Successfully....");
    	return response;
	}

}
